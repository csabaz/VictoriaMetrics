services:
  traefik:
    image: 'traefik:v3.0'
    container_name: traefik
    restart: unless-stopped
    command:
      - '--log.level=INFO'
      - '--accesslog=true'
      - '--accessLog.filePath=/var/log/access.log'
      - '--accessLog.filters.statusCodes=400-499'
      - '--entrypoints.web.address=:80'
      - '--entrypoints.web.http.redirections.entryPoint.to=websecure'
      - '--entrypoints.web.http.redirections.entryPoint.scheme=https'
      - '--entrypoints.websecure.address=:443'
      - '--providers.docker=true'
      - '--providers.docker.exposedByDefault=false'
      - '--api=true'
      - '--metrics.prometheus=true'
      - '--metrics.prometheus.addEntryPointsLabels=true'
      - '--metrics.prometheus.addServicesLabels=true'
      - '--metrics.prometheus.buckets=0.1,0.3,1.2,5.0'
      - '--entrypoints.metrics.address=:8082'
      - '--metrics.prometheus.entryPoint=metrics'
      - '--providers.file.directory=/configuration/'
      - '--providers.file.watch=true'
    labels:
      - 'traefik.enable=true'
      - 'traefik.http.routers.traefik.entrypoints=websecure'
      - 'traefik.http.routers.traefik.rule=Host(`${traefik_domain}`)'
      - 'traefik.http.routers.traefik.service=api@internal'
      - 'traefik.http.routers.traefik.tls=true'
      #- 'traefik.http.routers.traefik.middlewares=default-auth'
      #- 'traefik.http.middlewares.default-auth.basicauth.users=${user1}:${pass1},${user2}:${pass2}'
    ports:
      - '80:80'
      - '443:443'
    expose:
      - 8082
    volumes:
      - '/etc/localtime:/etc/localtime:ro'
      - './data/letsencrypt:/letsencrypt'
      - './data/configuration/:/configuration/'
      - './data/certificates/:/certificates/'
      - '/var/run/docker.sock:/var/run/docker.sock:ro'
      - '/var/log/traefik:/var/log'
 
#  Metrics collector.
#  It scrapes targets defined in --promscrape.config
#  And forward them to --remoteWrite.url
  vmagent:
    container_name: vmagent
    image: victoriametrics/vmagent:v1.102.1
    depends_on:
      - "vminsert"
    ports:
      - 8429:8429
    volumes:
      - vmagentdata:/vmagentdata
      - ./prometheus-cluster.yml:/etc/prometheus/prometheus.yml
    command:
      - '--promscrape.config=/etc/prometheus/prometheus.yml'
      - '--remoteWrite.url=http://vminsert:8480/insert/0/prometheus/'
    restart: always

  # Grafana instance configured with VictoriaMetrics as datasource
  grafana:
    container_name: grafana
    image: grafana/grafana:10.4.2
    depends_on:
      - "vmauth"
    ports:
      - 3000
    restart: always
    volumes:
      - grafanadata:/var/lib/grafana
      - ./provisioning/datasources/prometheus-datasource:/etc/grafana/provisioning/datasources
      - ./provisioning/dashboards:/etc/grafana/provisioning/dashboards
      - ./../../dashboards/victoriametrics-cluster.json:/var/lib/grafana/dashboards/vm.json
      - ./../../dashboards/vmagent.json:/var/lib/grafana/dashboards/vmagent.json
      - ./../../dashboards/vmalert.json:/var/lib/grafana/dashboards/vmalert.json
      - ./../../dashboards/vmauth.json:/var/lib/grafana/dashboards/vmauth.json
    labels:
      - 'traefik.enable=true'
      - 'traefik.port=3000'
      - 'traefik.http.routers.grafana.rule=Host(`${grafana_domain}`)'
      - 'traefik.http.routers.grafana.entrypoints=websecure'
      - 'traefik.http.routers.grafana.tls=true'
      #- 'traefik.http.routers.grafana.middlewares=default-auth'

  # vmstorage shards. Each shard receives 1/N of all metrics sent to vminserts,
  # where N is number of vmstorages (2 in this case).
  vmstorage-1:
    container_name: vmstorage-1
    image: victoriametrics/vmstorage:v1.102.1-cluster
    ports:
      - 8482
      - 8400
      - 8401
    volumes:
      - strgdata-1:/storage
    command:
      - '--storageDataPath=/storage'
    restart: always
  vmstorage-2:
    container_name: vmstorage-2
    image: victoriametrics/vmstorage:v1.102.1-cluster
    ports:
      - 8482
      - 8400
      - 8401
    volumes:
      - strgdata-2:/storage
    command:
      - '--storageDataPath=/storage'
    restart: always

  # vminsert is ingestion frontend. It receives metrics pushed by vmagent,
  # pre-process them and distributes across configured vmstorage shards.
  vminsert:
    container_name: vminsert
    image: victoriametrics/vminsert:v1.102.1-cluster
    depends_on:
      - "vmstorage-1"
      - "vmstorage-2"
    command:
      - '--storageNode=vmstorage-1:8400'
      - '--storageNode=vmstorage-2:8400'
    ports:
      - 8480:8480
    restart: always

  # vmselect is a query fronted. It serves read queries in MetricsQL or PromQL.
  # vmselect collects results from configured `--storageNode` shards.
  vmselect-1:
    container_name: vmselect-1
    image: victoriametrics/vmselect:v1.102.1-cluster
    depends_on:
      - "vmstorage-1"
      - "vmstorage-2"
    command:
      - '--storageNode=vmstorage-1:8401'
      - '--storageNode=vmstorage-2:8401'
      - '--vmalert.proxyURL=http://vmalert:8880'
    ports:
      - 8481
    restart: always
  vmselect-2:
    container_name: vmselect-2
    image: victoriametrics/vmselect:v1.102.1-cluster
    depends_on:
      - "vmstorage-1"
      - "vmstorage-2"
    command:
      - '--storageNode=vmstorage-1:8401'
      - '--storageNode=vmstorage-2:8401'
      - '--vmalert.proxyURL=http://vmalert:8880'
    ports:
      - 8481
    restart: always

  # vmauth is a router and balancer for HTTP requests.
  # It is configured via --auth.config and balances
  # read requests from Grafana, vmui, vmalert among vmselects.
  # It can be used as an authentication proxy.
  vmauth:
    container_name: vmauth
    image: victoriametrics/vmauth:v1.102.1
    depends_on:
      - "vmselect-1"
      - "vmselect-2"
    volumes:
      - ./auth-cluster.yml:/etc/auth.yml
    command:
      - '--auth.config=/etc/auth.yml'
    ports:
      - 8427:8427
    restart: always
    labels:
      - 'traefik.enable=true'
      - 'traefik.port=8427'
      - 'traefik.http.routers.vmauth.rule=Host(`${vmui_domain}`)'
      - 'traefik.http.routers.vmauth.entrypoints=websecure'
      - 'traefik.http.routers.vmauth.tls=true'
      #- 'traefik.http.routers.vmauth.middlewares=default-auth'

  # vmalert executes alerting and recording rules
  vmalert:
    container_name: vmalert
    image: victoriametrics/vmalert:v1.102.1
    depends_on:
      - "vmauth"
    ports:
      - 8880:8880
    volumes:
      - ./alerts-cluster.yml:/etc/alerts/alerts.yml
      - ./alerts-health.yml:/etc/alerts/alerts-health.yml
      - ./alerts-vmagent.yml:/etc/alerts/alerts-vmagent.yml
      - ./alerts-vmalert.yml:/etc/alerts/alerts-vmalert.yml
    command:
      - '--datasource.url=http://vmauth:8427/select/0/prometheus'
      - '--remoteRead.url=http://vmauth:8427/select/0/prometheus'
      - '--remoteWrite.url=http://vminsert:8480/insert/0/prometheus'
      - '--notifier.url=http://alertmanager:9093/'
      - '--rule=/etc/alerts/*.yml'
      # display source of alerts in grafana
      - '-external.url=http://127.0.0.1:3000' #grafana outside container
      - '--external.alert.source=explore?orgId=1&left={"datasource":"VictoriaMetrics","queries":[{"expr":{{.Expr|jsonEscape|queryEscape}},"refId":"A"}],"range":{"from":"{{ .ActiveAt.UnixMilli }}","to":"now"}}'
    restart: always

  # alertmanager receives alerting notifications from vmalert
  # and distributes them according to --config.file.
  alertmanager:
    container_name: alertmanager
    image: prom/alertmanager:v0.27.0
    volumes:
      - ./alertmanager.yml:/config/alertmanager.yml
    command:
      - '--config.file=/config/alertmanager.yml'
    ports:
      - 9093
    restart: always
    labels:
      - 'traefik.enable=true'
      - 'traefik.port=9093'
      - 'traefik.http.routers.alertmanager.rule=Host(`${alertmanager_domain}`)'
      - 'traefik.http.routers.alertmanager.entrypoints=websecure'
      - 'traefik.http.routers.alertmanager.tls=true'
      #- 'traefik.http.routers.alertmanager.middlewares=default-auth'

volumes:
  vmagentdata: {}
  strgdata-1: {}
  strgdata-2: {}
  grafanadata: {}
